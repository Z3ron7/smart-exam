-- Users Table
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    -- Other user-related columns (e.g., name, email, etc.)
);

-- Programs (Courses) Table (predefined)
CREATE TABLE programs (
    program_id INT PRIMARY KEY AUTO_INCREMENT,
    program_name VARCHAR(255) NOT NULL
);

-- Competencies Table (predefined)
CREATE TABLE competencies (
    competency_id INT PRIMARY KEY AUTO_INCREMENT,
    competency_name VARCHAR(255) NOT NULL
);

-- Exams Table (with program_id and competency_id)
CREATE TABLE exams (
    exam_id INT PRIMARY KEY AUTO_INCREMENT,
    exam_name VARCHAR(255) NOT NULL,
    program_id INT,
    competency_id INT,
    duration_minutes INT NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (program_id) REFERENCES programs(program_id),
    FOREIGN KEY (competency_id) REFERENCES competencies(competency_id)
);

-- Questions Table (with program_id and competency_id)
CREATE TABLE questions (
    question_id INT PRIMARY KEY AUTO_INCREMENT,
    questionText TEXT NOT NULL,
    program_id INT,
    competency_id INT,
    FOREIGN KEY (program_id) REFERENCES programs(program_id),
    FOREIGN KEY (competency_id) REFERENCES competencies(competency_id)
);

-- Choices Table (with question_id)
CREATE TABLE choices (
    choice_id INT PRIMARY KEY AUTO_INCREMENT,
    choiceText TEXT NOT NULL,
    question_id INT,
    is_correct boolean,
    FOREIGN KEY (question_id) REFERENCES questions(question_id)
);

-- User Exams Table 
CREATE TABLE user_exams (
    user_exam_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    exam_id INT NOT NULL,
    score INT,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (exam_id) REFERENCES exams(exam_id)
);
